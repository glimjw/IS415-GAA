---
title: "Hands-on-Exercise 2: Thematic Mapping and GeoVisualisation with R"
execute:
  warning: false
date: "`r Sys.Date()`"
---

## Overview

In this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package.

## Getting Started

In this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are: readr for importing delimited text file (part of tidyverse) tidyr for tidying data (part of tidyverse) dplyr for wrangling data (part of tidyverse) sf for handling geospatial data.

The code chunk below will be used to install and load these packages in RStudio. Note: installing tidyverse = instally readr/tidyr/dplyr

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## **Importing Data into R**

### **The Data**

Two data set will be used to create the choropleth map: - Master Plan 2014 Subzone Boundary (MP14_SUBZONE_WEB_PL) - Singapore Residents by Subzone / Age / Sex / Type of Dwelling (respopagesextod2011to2020.csv)

### **Importing Geospatial Data into R**

The code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.

```{r}
mpsz <- st_read(dsn = "../../data/wk1_data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

mpsz
```

### **Importing Attribute Data into R**

Next, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.

The task will be performed by using read_csv() function of readr package as shown in the code chunk below.

```{r}
popdata <- read_csv("../../data/wk1_data/aspatial/respopagesextod2011to2020.csv")
```

### **Data Preparation**

Before we start creating the thematic map, we need to prepare a data table with year 2020 values, which consists of the variables (PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY).

#### **Data wrangling**

The data wrangling and transformation functions that we will be using: - pivot_wider() of tidyr package, and - mutate(), filter(), group_by() and select() of dplyr package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

#### **Joining the attribute data and geospatial data**

Before performing the georelational join, we need to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other hand, the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.

left_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))

write_rds(mpsz_pop2020, "../../data/wk1_data/mpszpop2020.rds")

```

### **Choropleth Mapping Geospatial Data Using tmap**

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors.

Two approaches can be used to prepare thematic map using tmap, they are: - Plotting a thematic map quickly by using qtm(). - Plotting highly customisable thematic map by using tmap elements.

#### **Plotting a choropleth map quickly by using qtm()**

The easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.

The code chunk below will draw a cartographic standard choropleth map as shown below.

-   tmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.
-   fill argument is used to map the attribute (i.e. DEPENDENCY)

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

### **Creating a choropleth map by using tmap’s elements**

To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

#### **Drawing a base map**

In the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### **Drawing a choropleth map using tm_polygons()**

To draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

### **Drawing a choropleth map using tm_fill() and *tm_border()***\*

Actually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.

The code chunk below draws a choropleth map by using tm_fill() alone. This map will not show the border.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

Notice that the planning subzones are shared according to the respective dependecy values

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

**Note:**

Beside alpha argument, there are three other arguments for tm_borders(), they are:

\- col = border colour

\- lwd = border line width. The default is 1

\- lty = border line type. The default is “solid”

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

### **Data classification methods of tmap**

tmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks

"pretty" classification method is the default method.

To define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.

#### **Plotting choropleth maps with built-in classification methods**

The code chunk below shows a quantile data classification that used 5 classes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, equal data classification method is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

In the code chunk below, kmeans data classification method is used, and setting n=2. kmeans + n=5 is similar to jenks + n=5

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

#### **Plotting choropleth map with custome break**

Checking the descriptive statistics

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

Now, we will plot the choropleth map by using the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

### **Colour Scheme**

tmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package

#### **Using ColourBrewer palette**

We can change the colour to "palette" argument in the "tm_fill()" in the code

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)

```

To reverse the colour shading, add a “-” prefix. In this example, we set palette to greens but reversed (-)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

### **Map Layouts**

We can include title, scale bar, compass, margins and aspect ratios in our map.

#### **Map Legend**

In **tmap**, several legend options are provided to change the placement, format and appearance of the legend.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

#### **Map style**

**tmap** allows a wide variety of layout settings to be changed. They can be called by using tmap_style().

The code chunk below shows the classic style is used.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

#### **Cartographic Furniture**

Beside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.

We can simply add them by using tm_compass(), tm_scale_bar() and tm_grid()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset the default style, refer to the code chunk below.

```{r}
tmap_style("white")
```

### **Drawing Small Multiple Choropleth Maps**

In tmap, small multiple maps can be plotted in three ways:

\- by assigning multiple values to at least one of the asthetic arguments

\- by defining a group-by variable in tm_facets()

\- by creating multiple stand-alone maps with tmap_arrange()

#### **By assigning multiple values to at least one of the aesthetic arguments**

In this example, small multiple choropleth maps are created by defining ncols in tm_fill()

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

To create multiple small maps WITH different colours, we can do it like this:

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

#### **By defining a group-by variable in tm_facets()**

In this example, multiple small choropleth maps are created by using tm_facets(). The multiple maps will show the data for each type of variable under "tm_facets()"

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

#### **By creating multiple stand-alone maps with tmap_arrange()**

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().

We create the individual "mini" maps, thereafter we will arrange them

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

### **Mappping Spatial Object Meeting a Selection Criterion**

Instead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.

In this example, we will focus on the CENTRAL REGION

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
