---
title: "Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore"
author: "Gerald Lim"
date: "`r Sys.Date()`"
output:
  html_document:
    toc: true
execute:
  warning: false
  freeze: false
---

## Setting the Scene

Human mobility, the movement of human beings in space and time, reflects the spatial-temporal characteristics of human behavior. With the advancement Information and Communication Technologies (ICT) especially smart phone, a large volume of data related to human mobility have been collected. By using appropriate GIS analysis methods, these data are potentially useful in supporting smart city planning and management.

In Singapore, one of the important source of data related to human mobility is from [Land Transport Authority (LTA) DataMall](https://datamall.lta.gov.sg/content/datamall/en.html). Two data sets related to human mobility are provided by the portal, they are: Passenger Volume by Origin Destination Train Stations and Passenger Volume by Origin Destination Bus Stops. One of the limitation of these data sets is that their location are biased to either bus stops or MRT/LRT stations. In 2020, another very interesting human mobility data set called [Grab Posisi](https://engineering.grab.com/grab-posisi) was released by GRAB, one of the largest shared taxi operator in South-east Asia. There are two data sets been released and one of them is for Singapore.

## Objectives

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore.

## 1 Install maptools

```{r}
#| eval: false 
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

Installing the required tools for the analysis (e.g. sf, tidyverse, maptools, etc)

```{r}
pacman::p_load(maptools, sf, raster, spatstat, tmap, tidyverse, arrow, lubridate, dplyr, spNetwork)
```

## 2 Data Import and Wrangling

This is where we import the data and prepare it before analysis\`\`.

Let's use st_read() of sf package to import these three geospatial data sets into R. And we will be using other functions to prepare our data upon importing them.

The 3 data are:

-   Grab Taxi location points ([Grab-Posisi](https://engineering.grab.com/grab-posisi))

-   Road layer within SG ([Geofabrik download server](https://download.geofabrik.de/)) \[Malaysia, Singapore, and Brunei coverage\]

-   SG Boundary ([data.gov.sg](https://beta.data.gov.sg/collections/1749/view)) \[Master Plan 2019 Subzone Boundary (No Sea)\]

### 2.1 Grab Taxi lcoation points (grab_df)

Let's use read_parquet() function to read the grab parquet file, and import it into grab_df

```{r}
# Check if the data is already loaded
if (!exists("road_sf")) {
  # Import data if not loaded
  grab_df <- read_parquet("data/aspatial/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy - Copy.parquet")
}
```

Convert the timestamp for grab_df

```{r}
grab_df$pingtimestamp <- as_datetime(grab_df$pingtimestamp)
```

Let's take a glimpse of our grab_df data

```{r}
glimpse(grab_df)
```

Save the data into grab_rds

```{r}
write_rds(grab_df, "data/rds/grab.rds")
```

Extracting trip starting locations (origin_df)

```{r}
origin_df <- grab_df %>% group_by(trj_id) %>% arrange(pingtimestamp) %>% filter(row_number()==1) %>% mutate(weekday = wday(pingtimestamp, label=TRUE, abbr=TRUE), start_hr = factor(hour(pingtimestamp)), day = factor(mday(pingtimestamp)))
```

Extracting trip ending locations (destination_df)

```{r}
destination_df <- grab_df %>% group_by(trj_id) %>% arrange(desc(pingtimestamp)) %>% filter(row_number()==1) %>% mutate(weekday = wday(pingtimestamp, label=TRUE, abbr=TRUE), end_hr = factor(hour(pingtimestamp)), day = factor(mday(pingtimestamp)))
```

Let's save a copy of both origin_df and destination_df into the rds folder

```{r}
write_rds(origin_df, "data/rds/origin_df.rds") 
write_rds(destination_df, "data/rds/destination_df.rds")
```

Let's convert the grab_df from aspatial data into geospatial data

```{r}
origin_sf <- st_as_sf(origin_df, coords = c("rawlng", "rawlat"), crs = 4326) %>% 
  st_transform(crs = 3414) 
destination_sf <- st_as_sf(destination_df, coords = c("rawlng", "rawlat"), crs = 4326) %>% 
  st_transform(crs = 3414)
```

Let's check the referencing system info of this road_df

```{r}
st_crs(origin_sf)
```

Since it is in SVY21 format, we will standardise the crs

```{r}
origin_sf <- st_transform(origin_sf, crs= 3414) 
destination_sf <- st_transform(destination_sf, crs= 3414) 
st_crs(origin_sf)
```

Let's visualise how grab_df looked like by using the **trips' origin** locations

```{r}

tmap_mode("plot") 
tm_shape(origin_sf) + 
  tm_dots()
```

Let's visualise how grab_df looked like by using the **trips' destination** locations

```{r}

tmap_mode("plot") 
tm_shape(destination_sf) + 
  tm_dots()
```

### 2.2 Road layer within SG (road_sf)

Let's use st_read() function to read the roads file, and import it into road_df

```{r}
# Check if the data is already loaded
if (!exists("road_sf")) {
  # Import data if not loaded
  road_sf <- st_read(dsn = "data/geospatial/malaysia-singapore-brunei-latest-free.shp", layer = "gis_osm_roads_free_1")
}
```

Let's check the referencing system info of this road_df

```{r}

st_crs(road_sf)
```

We want to extract the roads that are in Singapore as road_sf carries the road data of Malaysia and Brunei.

```{r}

# Define the bounding box for Singapore
singapore_bbox <- st_bbox(c(xmin = 103, xmax = 104, ymin = 1.15, ymax = 1.47), crs = 4326)

# Crop roads within the bounding box
road_sg_sf <- st_crop(road_sf, st_as_sfc(st_bbox(singapore_bbox)))

# Print the resulting dataset
print(road_sg_sf)

```

Since it is in WGS 84 format, we will standardise the crs

```{r}

road_sg_sf <- st_transform(road_sg_sf, crs= 3414) 
st_crs(road_sg_sf)
```

### 2.3 SG Boundary (mpsz_sf)

Let's use st_read() function to read the Master Plan Subzone Boundary file, and import it into mpsz_sf

```{r}

# Check if the data is already loaded
if (!exists("mpsz_sf")) {
  # Import data if not loaded
  mpsz_sf <- st_read(dsn = "data/geospatial/MPSZ-2019", layer = "MPSZ-2019")
}
```

Let's check the referencing system info of this mpsz_sf

```{r}

st_crs(mpsz_sf)
```

Since it is in WGS 84 format, we will standardise the crs

```{r}
mpsz_sf <- st_transform(mpsz_sf, crs= 3414) 
st_crs(mpsz_sf)
```

Let's plot mpsz to see how it looks like

```{r}

# Set tmap mode to plotting 
tmap_mode("plot") 
# Plot the map 
tm_shape(mpsz_sf) + 
  tm_borders() + 
  tm_layout(frame = FALSE) + 
  tm_basemap(server = "Stamen.TonerLite") + 
  tm_shape(mpsz_sf) + 
  tm_borders(lwd = 0.5) + 
  tm_layout(legend.show = FALSE) 
```

Now, let's combine both mpsz_sf and origin_sf

```{r}
tm_shape(mpsz_sf) + 
  tm_polygons() + 
  tm_shape(origin_sf) + 
  tm_dots()
```

### 2.4 Convert our sf data frames to sp's spatial\* class

Convert origin_sf to sp's spatial\* class

```{r}

origin <- as_Spatial(origin_sf) 
mpsz <- as_Spatial(mpsz_sf)
```

### 2.5 Convert our spatial\* class into sp format

Convert origin and mpsz to sp format

```{r}
origin_sp <- as(origin, "SpatialPoints") 
mpsz_sp <- as(mpsz, "SpatialPolygons")
```

### 2.6 Convert our sp format into ppp

Convert origin_sp to ppp format

```{r}
library(spatstat)

# Assuming origin_sp is a SpatialPoints object
coords <- coordinates(origin_sp)

# Create a rectangular window covering the entire extent of the points
window <- owin(xrange = range(coords[, 1]), yrange = range(coords[, 2]))

# Create a ppp object with the adjusted window
origin_ppp <- ppp(coords[, 1], coords[, 2], window = window)

origin_ppp

plot(origin_ppp)
```

### 2.7 Creating the owin object

```{r}
mpsz_owin <- as.owin(mpsz_sp) 
```

Let's plot the new owin

```{r}
plot(mpsz_owin)
```

```{r}
summary(mpsz_owin)
```

### 2.8 Combining ppp with owin object

Let's combine the ppp with the newly created owin object

```{r}
# Now you can use this mpsz_owin object in your ppp operation  
originMPSZ_ppp <- origin_ppp[mpsz_owin] 
plot(originMPSZ_ppp)
```

## 3 Kernel Density Estimation

### 3.1 Computing the kernel density estimation (KDE) of grab hailing services

The purpose of KDE is to apply the function to each data point, and thereafter it will averages the location of that point with respect to the location of another data point, based on bandwidth of the kernel.

Let's compute the KDE

```{r}
kde_originMPSZ_bw <- density(originMPSZ_ppp, sigma=bw.diggle, edge=TRUE, kernel="gaussian")  
plot(kde_originMPSZ_bw)
```

Since the unit of measurement is pretty small, let's re-scale it to km.

```{r}
originMPSZ_ppp.km <- rescale(originMPSZ_ppp, 1000, "km") 
kde_originMPSZ_ppp.bw <- density(originMPSZ_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")  
plot(kde_originMPSZ_ppp.bw)
```

### 3.2 Observations from kernel density estimation (KDE) of grab hailing services

Based on the plot, we can see that:

\- There is a **higher density** in the **East side**, which is a small part that is in yellow. We can say that there are **more trips originating from the East side**.

\- There are other parts of the island that has mini purple dots, indicating that there is a medium density. This could show that there is a relatively **normal ride demand across the island**.

\- Apart of the above, the island is mostly in blue from the first sight. So it indicate that the ridership for grab is not really high.

### 3.3 Zooming into kernel density estimation (KDE) of grab hailing services in the east

Let's extract the Eastern Region area to look deeper into the high density. We will also extract the Western and Central Region areas for comparison usage.

```{r}
east = mpsz[mpsz@data$REGION_N == "EAST REGION",]
west = mpsz[mpsz@data$REGION_N == "WEST REGION",]
central = mpsz[mpsz@data$REGION_N == "CENTRAL REGION",]

par(mfrow=c(2,2))
plot(east, main = "East Region")
plot(west, main = "West Region")
plot(central, main = "Central Region")
```

Convert the Eastern Region area to generic sp format

```{r}
east_sp = as(east, "SpatialPolygons")
west_sp = as(west, "SpatialPolygons")
central_sp = as(central, "SpatialPolygons")
```

Create the owin object for it

```{r}
east_owin = as(east_sp, "owin")
west_owin = as(west_sp, "owin")
central_owin = as(central_sp, "owin")
```

Let's combine the grab points with the Eastern Region area

```{r}
grab_east_ppp = origin_ppp[east_owin]
grab_west_ppp = origin_ppp[west_owin]
grab_central_ppp = origin_ppp[central_owin]
```

Let's transform the unit of measurement to km

```{r}
grab_east_ppp.km = rescale(grab_east_ppp, 1000, "km")
grab_west_ppp.km = rescale(grab_west_ppp, 1000, "km")
grab_central_ppp.km = rescale(grab_central_ppp, 1000, "km")
```

#### 3.3.1 Let's plot the Eastern and Western Regions area and compare it

```{r}
par(mfrow=c(1,2))
plot(grab_east_ppp.km, main="East Region")
plot(grab_west_ppp.km, main="West Region")
```

Note: We can see that the western region has more grab rides, as there are more grab origin points as shown by the darker area.

Let's compare the KDE of both Eastern and Western Regions

```{r}
par(mfrow=c(1,2))
plot(density(grab_east_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Eastern Region")
plot(density(grab_west_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Western Region")
```

Even though, the KDE density of whole Singapore map indicates that there is a high density on the Eastern Region of the island.

However, when we plot the Origin points of both the Eastern and Western Regions, we noticed that there are actually more grab origin points in the Western Region as oppose to the main map.

When we plot the KDE density of both the Eastern and Western regions of island, we noticed that there were more points with high density in the western region. However, in the Eastern Region, we can see that there is a high density situated at one point, apart from the other tiny points of high density.

Let's zoom in and see the KDE density of the Eastern Region. It looks like the area with high density is situated at Changi Airport area.

Set up our Changi Airport area

```{r}
ChangiAirport = mpsz[mpsz@data$SUBZONE_N == "CHANGI AIRPORT",]
ChangiAirport_sp = as(ChangiAirport, "SpatialPolygons")
ChangiAirport_owin = as(ChangiAirport_sp, "owin")
ChangiAirport_ppp = origin_ppp[ChangiAirport_owin]
ChangiAirport_ppp.km = rescale(ChangiAirport_ppp, 1000, "km")
```

Let's plot and compare

```{r}
par(mfrow=c(1,2))
plot(density(grab_east_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Eastern Region")
plot(density(ChangiAirport_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Changi Airport")
```

We could see that, indeed, the line with high density is situated at Changi Airport within the Eastern Region. We can indicate that there is a significantly high volume of grab rides originating from Changi Airport.

## 4 Network Constrained KDE (NetKDE) Analysis

We will perform NetKDE to estimate the intensity of grab hailing across a map.

### 4.1 Preparing the area for analysis

We will filter the specific portion that we want to look into. In this case, we will filter the Changi Airport portion of the whole Singapore island. As we know that Changi Airport is located along the Airport Boulevard, we will filter it out using that name.

```{r}
road_sg_sf_transformed <- st_transform(road_sg_sf, CRS=3414)
#filter Changi Airport (Airport Boulevard) from road_sg_sf
filtered_airport_boulevard <- road_sg_sf_transformed %>%
  filter(tolower(name) == "airport boulevard")
```

Let's plot filtered_airport_boulevard

```{r}
# Plot the filtered Airport Boulevard
tmap_mode('view')
tm_shape(filtered_airport_boulevard) +
  tm_lines() +
  tm_shape(origin_sf) + 
  tm_dots()
```

As you can see from the plot, we could clearly see there is a significant high level of spatial data points along the Airport Boulevard, which indicates that there are many grab rides originating from the Airport. This further explains the KDE results that we have seen earlier. We can imply from the plots that there are a signifantly high amount of grab rides originating from the Airport, while there are a normal level of grab rides originating from other regions of the island.

### 4.2 Preparing the lixels objects

Let's prepare the lixels objects. We will set the lixel length to 700m and minimum length of lixel to 350m.

```{r}
#lixels <- lixelize_lines(filtered_airport_boulevard, 
#                         700, 
#                         mindist = 350)
```

Let's generate the centre points

```{r}
#samples <- lines_center(lixels)
```

### 4.3 Perform NetKDE

Let's compute the NetKDE

```{r}

# Run the nkde function
#densities <- nkde(filtered_airport_boulevard, 
#                  events = origin_sf,
#                  w = rep(1, nrow(origin_sf)),
#                  samples = samples,
#                  kernel_name = "quartic",
#                  bw = 300, 
#                  div = "bw", 
#                  method = "simple", 
#                  digits = 1, 
#                  tol = 1,
#                  grid_shape = c(1, 1), 
#                  max_depth = 8,
#                  agg = 5, 
#                  sparse = TRUE,
#                  verbose = FALSE)


```


## 5 Conclusion

With the use of geospatial analytics tools like KDE and NKDE, we could see the obvious trend in our data. Instead of plotting graphs to see the trend, we could utilise the geosptial tools like tmaps to plot the map, and plot the spatial points on the map, so it would be useful for us to see the trend at the first glance. The KDE and Network KDE provides us with a more in-depth insight in the density of our data on the map. This is because if we simply plot the tmap with the spatial data points, we may not be able to obviously find the interesting area of focus on the map as the map would be full of black dots. However, with the help of KDE and NKDE, we are able to see the trend clearly via the density, which are indicated with different colours.
