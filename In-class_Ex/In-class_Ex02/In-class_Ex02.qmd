---
title: "R for Geospatial Data Science"
date: "`r Sys.Date()`"
format: 
  html: 
    code-fold: true
    code-summary: "Show the code"
    toc-depth: 4
execute:
  eval: true
  echo: true
  warning: false
editor: visual
---

# Getting Started

::: callout-note

### Before we start, create the folder and file

-   create a folder called In-class_Ex02.
-   create a new Quarto document called In-class_Ex02.
:::

Write a code check to load the R packages into R environment

The follwing R-packages will be used:
- Arrow
- Lubridate
- Tidyverse
- tmap
- sf

```{R}
pacman::p_load(arrow, lubridate, tidyverse, sf, tmap)
```

## Importing Grab-Posisi Dataset

```{r}
#| eval: false
df <- read_parquet("../../data/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy - Copy.parquet")
```

Convert the data type of pingtimestamp from character to date-time
(to make sure the data are of the correct format)
```{r}
#| eval: false
df$pingtimestamp <- as_datetime(df$pingtimestamp)
```

## Extracting trip starting locations

- Extracting trips' origin locations
- Derive three new columns (i.e. variables) for weekday, starting hour and day of the month
- Name the output tibble data.frame origin.df

```{r}
#| eval: false
origin_df <- df %>%
  group_by(trj_id) %>%
  arrange(pingtimestamp) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```
** the wday/label/abbr/etc are part of the Lubridate function
** factor will change the data to ordinal scale - an order (if not it would be just recognise the data as pure numbers instead of hour/min/etc)

## Extracting trip ending locations

Extract trip's destination locations.

```{r}
#| eval: false
destination_df <- df %>%
  group_by(trj_id) %>%
  arrange(desc(pingtimestamp)) %>%
  filter(row_number()==1) %>%
  mutate(weekday = wday(pingtimestamp,
                        label=TRUE,
                        abbr=TRUE),
         start_hr = factor(hour(pingtimestamp)),
         day = factor(mday(pingtimestamp)))
```
** sort the timestamp backwards (using desc) to get the last timestamp of a trip (trj_id)

To reuse the tables, we need to create rds
```{r}
#| echo: false
#| eval: false
write_rds(origin_df, "data/rds/origin_df.rds")
write_rds(destination_df, "data/rds/destination_df.rds")
```

## Import data (to use the rds)
```{r}
origin_df <- read_rds("data/rds/origin_df.rds")
destination_df <- read_rds("data/rds/destination_df.rds")
```

### Visualising frequency distribution

